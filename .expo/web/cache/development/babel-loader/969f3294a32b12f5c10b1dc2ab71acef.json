{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { useIsFocused } from '@react-navigation/native';\nimport * as firebase from 'firebase';\nimport apiKeys from \"../config/keys\";\nimport ActivityStackButton from \"../components/ActivityStackButton\";\nimport MessagesStackButton from \"../components/MessagesStackButton\";\nimport Post from \"../components/Post\";\nimport InstaStory from \"../components/InstaStory\";\nimport BottomSheet from \"../components/BottomSheet\";\nimport { styles } from \"../styles/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function HomeScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      posts = _useState2[0],\n      setPosts = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var isFocused = useIsFocused();\n\n  var _useState5 = useState(firebase.auth().currentUser.uid),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentUserUID = _useState6[0],\n      setCurrentUserUID = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      userDBdata = _useState8[0],\n      setUserDBdata = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      weHaveUser = _useState10[0],\n      setWeHaveUser = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      fadeBottomSheet = _useState12[0],\n      _setFadeBottomSheet = _useState12[1];\n\n  var _useState13 = useState('Add new comment...'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      newComment = _useState14[0],\n      _setNewComment = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      addNewComment = _useState16[0],\n      setAddNewComment = _useState16[1];\n\n  var _useState17 = useState(null),\n      _useState18 = _slicedToArray(_useState17, 2),\n      selectedId = _useState18[0],\n      _setSelectedId = _useState18[1];\n\n  var commmentValue;\n\n  var readUserData = function readUserData() {\n    var userId;\n    return _regeneratorRuntime.async(function readUserData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"ReadUserData:\");\n\n            if (!firebase.auth().currentUser) {\n              _context.next = 6;\n              break;\n            }\n\n            userId = firebase.auth().currentUser.uid;\n\n            if (!userId) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(firebase.database().ref('users/' + userId).once('value').then(function (snapshot) {\n              var userData = snapshot.val();\n              setUserDBdata(userData);\n              setWeHaveUser(true);\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchPost();\n  }, [navigation, isFocused]);\n  useEffect(function () {\n    LogBox.ignoreLogs(['Setting a timer for a long period of time']);\n    LogBox.ignoreLogs(['VirtualizedLists should never be nested']);\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(apiKeys.firebaseConfig);\n    } else {\n      firebase.app();\n    }\n\n    fetchPost();\n    readUserData();\n  }, []);\n\n  var fetchPost = function fetchPost() {\n    var list;\n    return _regeneratorRuntime.async(function fetchPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            list = [];\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(firebase.firestore().collection('posts').orderBy('postTime', 'desc').get().then(function (querySnapshot) {\n              querySnapshot.forEach(function (doc) {\n                var _doc$data = doc.data(),\n                    userId = _doc$data.userId,\n                    post = _doc$data.post,\n                    postImg = _doc$data.postImg,\n                    postTime = _doc$data.postTime,\n                    likes = _doc$data.likes,\n                    comments = _doc$data.comments,\n                    userName = _doc$data.userName,\n                    userImg = _doc$data.userImg,\n                    taggedUsers = _doc$data.taggedUsers,\n                    Localization = _doc$data.Localization,\n                    postOnTwitterEnabled = _doc$data.postOnTwitterEnabled,\n                    postOnFacebookEnabled = _doc$data.postOnFacebookEnabled,\n                    postOnTumblrEnabled = _doc$data.postOnTumblrEnabled,\n                    takenImageName = _doc$data.takenImageName,\n                    hideNumberOfLikesComments = _doc$data.hideNumberOfLikesComments,\n                    disableCommenting = _doc$data.disableCommenting;\n\n                list.push({\n                  id: doc.id,\n                  userId: userId,\n                  userName: userName,\n                  userImg: userImg,\n                  postTime: postTime,\n                  post: post,\n                  postImg: postImg,\n                  liked: false,\n                  likes: likes,\n                  comments: comments,\n                  taggedUsers: taggedUsers,\n                  Localization: Localization,\n                  postOnTwitterEnabled: postOnTwitterEnabled,\n                  postOnFacebookEnabled: postOnFacebookEnabled,\n                  postOnTumblrEnabled: postOnTumblrEnabled,\n                  takenImageName: takenImageName,\n                  hideNumberOfLikesComments: hideNumberOfLikesComments,\n                  disableCommenting: disableCommenting\n                });\n              });\n            }));\n\n          case 4:\n            setPosts(list);\n\n            if (loading) {\n              setLoading(false);\n            }\n\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    selectedId == item.id ? commmentValue = newComment : commmentValue = 'Add new comment...';\n    return _jsx(Post, {\n      item: item,\n      navigation: navigation,\n      postdata: item,\n      userDBdata: userDBdata,\n      currentUserUID: currentUserUID,\n      onPress: function onPress() {\n        return navigation.navigate(\"HomeProfile\", {\n          userId: item.userId\n        });\n      },\n      userDBdata: userDBdata,\n      setSelectedId: function setSelectedId() {\n        return _setSelectedId(item.id);\n      },\n      setFadeBottomSheet: function setFadeBottomSheet(set) {\n        return _setFadeBottomSheet(set);\n      },\n      newComment: commmentValue,\n      setInHomeNewComment: function setInHomeNewComment(val) {\n        return _setNewComment(val);\n      },\n      note: 'HOME'\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsx(View, {\n        children: _jsx(Image, {\n          style: styles.img,\n          source: require(\"../assets/images/test.png\")\n        })\n      }), _jsxs(View, {\n        style: styles.imgButton,\n        children: [_jsx(ActivityStackButton, {\n          navigation: navigation\n        }), _jsx(MessagesStackButton, {\n          navigation: navigation,\n          userDBdata: userDBdata\n        })]\n      })]\n    }), _jsx(View, {\n      style: styles.content,\n      children: _jsxs(ScrollView, {\n        nestedScrollEnabled: true,\n        children: [_jsx(ScrollView, {\n          horizontal: true,\n          nestedScrollEnabled: true,\n          children: _jsx(InstaStory, {\n            navigation: navigation\n          })\n        }), _jsx(FlatList, {\n          data: posts,\n          renderItem: renderItem,\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          }\n        })]\n      })\n    }), fadeBottomSheet ? _jsx(BottomSheet, {\n      currentUser: userDBdata,\n      setNewComment: function setNewComment(newComment) {\n        return _setNewComment(newComment);\n      },\n      newComment: newComment,\n      setFadeBottomSheet: function setFadeBottomSheet(set) {\n        return _setFadeBottomSheet(set);\n      },\n      postID: selectedId\n    }) : _jsx(View, {})]\n  });\n}","map":{"version":3,"sources":["C:/Users/bsosn/OneDrive/Desktop/Expo/instagram/screens/HomeScreen.js"],"names":["React","useState","useEffect","ScrollView","useIsFocused","firebase","apiKeys","ActivityStackButton","MessagesStackButton","Post","InstaStory","BottomSheet","styles","HomeScreen","route","navigation","posts","setPosts","loading","setLoading","isFocused","auth","currentUser","uid","currentUserUID","setCurrentUserUID","userDBdata","setUserDBdata","weHaveUser","setWeHaveUser","fadeBottomSheet","setFadeBottomSheet","newComment","setNewComment","addNewComment","setAddNewComment","selectedId","setSelectedId","commmentValue","readUserData","console","log","userId","database","ref","once","then","snapshot","userData","val","fetchPost","LogBox","ignoreLogs","apps","length","initializeApp","firebaseConfig","app","list","firestore","collection","orderBy","get","querySnapshot","forEach","doc","data","post","postImg","postTime","likes","comments","userName","userImg","taggedUsers","Localization","postOnTwitterEnabled","postOnFacebookEnabled","postOnTumblrEnabled","takenImageName","hideNumberOfLikesComments","disableCommenting","push","id","liked","renderItem","item","index","navigate","set","container","header","img","require","imgButton","content","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Image, LogBox, FlatList } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { useIsFocused } from '@react-navigation/native';\n\n/*FireBase*/\nimport * as firebase from 'firebase';\nimport apiKeys from '../config/keys';\n\n/*Components*/\nimport ActivityStackButton from '../components/ActivityStackButton';\nimport MessagesStackButton from '../components/MessagesStackButton';\nimport Post from \"../components/Post\";\nimport InstaStory from \"../components/InstaStory\"\nimport BottomSheet from '../components/BottomSheet'\n\n/*Styles*/\nimport { styles } from '../styles/styles'\n\nexport default function HomeScreen({ route, navigation }) {\n\n  const [posts, setPosts] = useState(null)\n  const [loading, setLoading] = useState(true);\n  const isFocused = useIsFocused();\n  const [currentUserUID, setCurrentUserUID] = useState(firebase.auth().currentUser.uid)\n  const [userDBdata, setUserDBdata] = useState();\n  const [weHaveUser, setWeHaveUser] = useState(false)\n  const [fadeBottomSheet, setFadeBottomSheet] = useState(false)\n  const [newComment, setNewComment] = useState('Add new comment...')\n  const [addNewComment, setAddNewComment] = useState(false)\n  const [selectedId, setSelectedId] = useState(null);\n  let commmentValue\n\n  const readUserData = async () => {\n    console.log(\"ReadUserData:\")\n    if (firebase.auth().currentUser) {\n      let userId = firebase.auth().currentUser.uid;\n      if (userId) {\n        await firebase.database().ref('users/' + userId)\n          .once('value')\n          .then(snapshot => {\n            let userData = snapshot.val();\n            setUserDBdata(userData);\n            setWeHaveUser(true)\n          });\n      }\n    }\n  }\n\n  useEffect(() => {\n    fetchPost();\n  }, [navigation, isFocused]);\n\n  useEffect(() => {\n    LogBox.ignoreLogs(['Setting a timer for a long period of time'])\n    LogBox.ignoreLogs(['VirtualizedLists should never be nested']);\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(apiKeys.firebaseConfig);\n    } else {\n      firebase.app(); // if already initialized, use that one\n    }\n    fetchPost();\n    readUserData();\n  }, []);\n\n  const fetchPost = async () => {\n    try {\n      const list = [];\n      await firebase.firestore()\n        .collection('posts')\n        .orderBy('postTime', 'desc')\n        .get()\n        .then((querySnapshot) => {\n          //console.log('Total Posts: ',querySnapshot.size)\n          querySnapshot.forEach(doc => {\n            const { userId, post, postImg, postTime, likes, comments, userName, userImg,\n              taggedUsers,\n              Localization,\n              postOnTwitterEnabled,\n              postOnFacebookEnabled,\n              postOnTumblrEnabled,\n              takenImageName,\n              hideNumberOfLikesComments,\n              disableCommenting,\n            } = doc.data();\n            list.push({\n              id: doc.id,\n              userId: userId,\n              userName: userName,\n              userImg: userImg,\n              postTime: postTime,\n              post: post,\n              postImg: postImg,\n              liked: false,\n              likes: likes,\n              comments: comments,\n              taggedUsers: taggedUsers,\n              Localization: Localization,\n              postOnTwitterEnabled: postOnTwitterEnabled,\n              postOnFacebookEnabled: postOnFacebookEnabled,\n              postOnTumblrEnabled: postOnTumblrEnabled,\n              takenImageName: takenImageName,\n              hideNumberOfLikesComments: hideNumberOfLikesComments,\n              disableCommenting: disableCommenting,\n            });\n          });\n        })\n      setPosts(list)\n      if (loading) {\n        setLoading(false);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n\n  const renderItem = ({ item, index }) => {\n    selectedId == item.id ? commmentValue = newComment : commmentValue = 'Add new comment...'\n    return (\n      <Post\n        item={item}\n        navigation={navigation}\n        postdata={item}\n        userDBdata={userDBdata}\n        currentUserUID={currentUserUID}\n        onPress={() => navigation.navigate(\"HomeProfile\", { userId: item.userId })}\n        userDBdata={userDBdata}\n        setSelectedId={() => setSelectedId(item.id)} //Id of the post\n        setFadeBottomSheet={(set) => setFadeBottomSheet(set)} //fade in sheet\n        newComment={commmentValue} //comment value\n        setInHomeNewComment={(val) => setNewComment(val)}\n        note={'HOME'}\n      />\n    );\n  };\n\n\n  return (\n\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <View>\n          <Image style={styles.img} source={require('../assets/images/test.png')} />\n        </View>\n\n        <View style={styles.imgButton}>\n          <ActivityStackButton navigation={navigation} />\n          <MessagesStackButton navigation={navigation} userDBdata={userDBdata} />\n        </View>\n\n      </View>\n      <View style={styles.content}>\n        <ScrollView nestedScrollEnabled={true}>\n          <ScrollView horizontal={true} nestedScrollEnabled={true}>\n            <InstaStory navigation={navigation} />\n          </ScrollView>\n          <FlatList\n            data={posts}\n            renderItem={renderItem}\n            keyExtractor={(item, index) => index.toString()}\n          />\n        </ScrollView>\n      </View>\n      {\n        fadeBottomSheet ?\n          <BottomSheet currentUser={userDBdata} setNewComment={(newComment) => setNewComment(newComment)} newComment={newComment}\n            setFadeBottomSheet={(set) => setFadeBottomSheet(set)} postID={selectedId} />\n          : <View></View>\n      }\n    </View>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}